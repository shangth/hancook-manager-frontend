/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CookIngredientsTypeIndexRouteImport } from './routes/cook/ingredientsType/index'
import { Route as CookIngredientsIndexRouteImport } from './routes/cook/ingredients/index'
import { Route as CookIndexIndexRouteImport } from './routes/cook/index/index'
import { Route as CookDishesTypeIndexRouteImport } from './routes/cook/dishesType/index'
import { Route as CookDishesIndexRouteImport } from './routes/cook/dishes/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CookIngredientsTypeIndexRoute =
  CookIngredientsTypeIndexRouteImport.update({
    id: '/cook/ingredientsType/',
    path: '/cook/ingredientsType/',
    getParentRoute: () => rootRouteImport,
  } as any)
const CookIngredientsIndexRoute = CookIngredientsIndexRouteImport.update({
  id: '/cook/ingredients/',
  path: '/cook/ingredients/',
  getParentRoute: () => rootRouteImport,
} as any)
const CookIndexIndexRoute = CookIndexIndexRouteImport.update({
  id: '/cook/index/',
  path: '/cook/index/',
  getParentRoute: () => rootRouteImport,
} as any)
const CookDishesTypeIndexRoute = CookDishesTypeIndexRouteImport.update({
  id: '/cook/dishesType/',
  path: '/cook/dishesType/',
  getParentRoute: () => rootRouteImport,
} as any)
const CookDishesIndexRoute = CookDishesIndexRouteImport.update({
  id: '/cook/dishes/',
  path: '/cook/dishes/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cook/dishes': typeof CookDishesIndexRoute
  '/cook/dishesType': typeof CookDishesTypeIndexRoute
  '/cook/index': typeof CookIndexIndexRoute
  '/cook/ingredients': typeof CookIngredientsIndexRoute
  '/cook/ingredientsType': typeof CookIngredientsTypeIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cook/dishes': typeof CookDishesIndexRoute
  '/cook/dishesType': typeof CookDishesTypeIndexRoute
  '/cook/index': typeof CookIndexIndexRoute
  '/cook/ingredients': typeof CookIngredientsIndexRoute
  '/cook/ingredientsType': typeof CookIngredientsTypeIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cook/dishes/': typeof CookDishesIndexRoute
  '/cook/dishesType/': typeof CookDishesTypeIndexRoute
  '/cook/index/': typeof CookIndexIndexRoute
  '/cook/ingredients/': typeof CookIngredientsIndexRoute
  '/cook/ingredientsType/': typeof CookIngredientsTypeIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cook/dishes'
    | '/cook/dishesType'
    | '/cook/index'
    | '/cook/ingredients'
    | '/cook/ingredientsType'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cook/dishes'
    | '/cook/dishesType'
    | '/cook/index'
    | '/cook/ingredients'
    | '/cook/ingredientsType'
  id:
    | '__root__'
    | '/'
    | '/cook/dishes/'
    | '/cook/dishesType/'
    | '/cook/index/'
    | '/cook/ingredients/'
    | '/cook/ingredientsType/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CookDishesIndexRoute: typeof CookDishesIndexRoute
  CookDishesTypeIndexRoute: typeof CookDishesTypeIndexRoute
  CookIndexIndexRoute: typeof CookIndexIndexRoute
  CookIngredientsIndexRoute: typeof CookIngredientsIndexRoute
  CookIngredientsTypeIndexRoute: typeof CookIngredientsTypeIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cook/ingredientsType/': {
      id: '/cook/ingredientsType/'
      path: '/cook/ingredientsType'
      fullPath: '/cook/ingredientsType'
      preLoaderRoute: typeof CookIngredientsTypeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cook/ingredients/': {
      id: '/cook/ingredients/'
      path: '/cook/ingredients'
      fullPath: '/cook/ingredients'
      preLoaderRoute: typeof CookIngredientsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cook/index/': {
      id: '/cook/index/'
      path: '/cook/index'
      fullPath: '/cook/index'
      preLoaderRoute: typeof CookIndexIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cook/dishesType/': {
      id: '/cook/dishesType/'
      path: '/cook/dishesType'
      fullPath: '/cook/dishesType'
      preLoaderRoute: typeof CookDishesTypeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cook/dishes/': {
      id: '/cook/dishes/'
      path: '/cook/dishes'
      fullPath: '/cook/dishes'
      preLoaderRoute: typeof CookDishesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CookDishesIndexRoute: CookDishesIndexRoute,
  CookDishesTypeIndexRoute: CookDishesTypeIndexRoute,
  CookIndexIndexRoute: CookIndexIndexRoute,
  CookIngredientsIndexRoute: CookIngredientsIndexRoute,
  CookIngredientsTypeIndexRoute: CookIngredientsTypeIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
